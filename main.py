import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from datetime import datetime, date, time, timedelta

#  —Ç–æ–∫–µ–Ω –≤—ñ–¥ BotFather
API_TOKEN = "8161794118:AAF1R1L-ugLfiYANK-iuiROwyGHx3sfxpYs"

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ —á–∞—Ç—ñ–≤, –¥–µ –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π
active_chats = set()

# –†–æ–∑–∫–ª–∞–¥ –¥–ª—è –¥–≤–æ—Ö —Ç–∏–∂–Ω—ñ–≤
schedule_week1 = {
    "–ü–Ω": {
        1: "–ü—Ä–∞–≤–æ–∑–Ω–∞–≤—Å—Ç–≤–æ (lec., Zoom)",
        2: "–ö–æ–º–ø'—é—Ç–µ—Ä–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤ —ñ —Å–∏—Å—Ç–µ–º (prc., Zoom)",
        4: "–ü—Ä–∞–≤–æ–∑–Ω–∞–≤—Å—Ç–≤–æ (prc., Zoom)"
    },
    "–í—Ç": {
        2: "–¢–µ–æ—Ä—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è. –ß.1 (prc., –æ—Ñ–ª–∞–π–Ω, 283-1)",
        3: "–û—Å–Ω–æ–≤–∏ —Ü–∏—Ñ—Ä–æ–≤–æ—ó —Å—Ö–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏ (lab., –æ—Ñ–ª–∞–π–Ω, 287–∞-1)"
    },
    "–°—Ä": {
        2: "–û—Å–Ω–æ–≤–∏ —Ü–∏—Ñ—Ä–æ–≤–æ—ó —Å—Ö–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏ (lec., Zoom)",
        3: "–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –∫—É—Ä—Å —ñ–Ω–æ–∑–µ–º–Ω–æ—ó –º–æ–≤–∏ (prc., Zoom)",
        5: "–ë—ñ–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ (prc., Zoom)"
    },
    "–ß—Ç": {
        2: "–¢–µ–æ—Ä—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è. –ß.1 (lec., Zoom)",
        4: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Å–∫–ª–∞–¥–∞–Ω–Ω—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–º—É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤—ñ (lec., Zoom)"
    },
    "–ü—Ç": {
        2: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Å–∫–ª–∞–¥–∞–Ω–Ω—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–º—É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤—ñ (prc., –æ—Ñ–ª–∞–π–Ω, 293-1)",
        5: "–ë—ñ–æ–Ω—ñ—á–Ω–∏–π –¥–∏–∑–∞–π–Ω (prc., Zoom)",
        6: "–ë—ñ–æ–Ω—ñ—á–Ω–∏–π –¥–∏–∑–∞–π–Ω (lec., Zoom)"
    },
    "–°–±": {}
}

schedule_week2 = {
    "–ü–Ω": {
        2: "–¢–µ–æ—Ä—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è. –ß–∞—Å—Ç–∏–Ω–∞ 1. –¢–µ–æ—Ä—ñ—è –ª—ñ–Ω—ñ–π–Ω–∏—Ö —Å–∏—Å—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è (lab., Zoom)",
        4: "–ë—ñ–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–∏ÃÜ–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ (lec., Zoom)",
        5: "–ö–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤ —ñ —Å–∏—Å—Ç–µ–º (lec., Zoom)"
    },
    "–í—Ç": {
        3: "–û—Å–Ω–æ–≤–∏ —Ü–∏—Ñ—Ä–æ–≤–æ—ó —Å—Ö–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏ (lab., –æ—Ñ–ª–∞–π–Ω, 287–∞-1)",
        5: "–û—Å–Ω–æ–≤–∏ —Ü–∏—Ñ—Ä–æ–≤–æ—ó —Å—Ö–µ–º–æ—Ç–µ—Ö–Ω—ñ–∫–∏ (prc., –æ—Ñ–ª–∞–π–Ω, 287–∞-1)"
    },
    "–°—Ä": {
        3: "–ü—Ä–∞–∫—Ç–∏—á–Ω–∏–π –∫—É—Ä—Å —ñ–Ω–æ–∑–µ–º–Ω–æ—ó –º–æ–≤–∏ (prc., Zoom)",
        4: "–ö–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤ —ñ —Å–∏—Å—Ç–µ–º (lec., Zoom)–ö–æ–º–ø‚Äô—é—Ç–µ—Ä–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤ —ñ —Å–∏—Å—Ç–µ–º (prc., Zoom)",
        5: "–ë—ñ–æ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–∏ÃÜ–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ (prc., Zoom)"
    },
    "–ß—Ç": {
        2: "–¢–µ–æ—Ä—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è. –ß.1 (lec., Zoom)",
        3: "–¢–µ–æ—Ä—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è. –ß.1 (lec., Zoom)",
        4: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Å–∫–ª–∞–¥–∞–Ω–Ω—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–º—É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤—ñ (lec., Zoom)"
    },
    "–ü—Ç": {
        3: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Å–∫–ª–∞–¥–∞–Ω–Ω—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–º—É –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤—ñ (prc., –æ—Ñ–ª–∞–π–Ω, 293-1)",
        5: "–ë—ñ–æ–Ω—ñ—á–Ω–∏–π –¥–∏–∑–∞–π–Ω (prc., Zoom)",
        6: "–ë—ñ–æ–Ω—ñ—á–Ω–∏–π –¥–∏–∑–∞–π–Ω (lec., Zoom)"
    },
    "–°–±": {}
}
# schedule_week2 = schedule_week1  # —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏, –ø–æ–∫–∏ —â–æ –∑–∞–ª–∏—à–∞—é —Ç–æ–π —Å–∞–º–∏–π

# –ß–∞—Å–∏ –ø–æ—á–∞—Ç–∫—É –ø–∞—Ä
lesson_times = {
    1: time(8, 30),
    2: time(10, 25),
    3: time(12, 20),
    4: time(14, 15),
    5: time(16, 10),
    6: time(18, 30)
}

# –ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∫—É (–ø–µ—Ä—à–∏–π —Ç–∏–∂–¥–µ–Ω—å) - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ 2 –≤–µ—Ä–µ—Å–Ω—è 2024
START_WEEK = date(2024, 9, 2)


# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–∏–∂–Ω—è (1 –∞–±–æ 2)
def get_week_number():
    today = date.today()
    weeks_passed = (today - START_WEEK).days // 7
    return 1 if weeks_passed % 2 == 0 else 2


# –í–∏–±—ñ—Ä —Ä–æ–∑–∫–ª–∞–¥—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–∂–Ω—è
def get_current_schedule():
    return schedule_week1 if get_week_number() == 1 else schedule_week2


# /start
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    chat_id = message.chat.id
    active_chats.add(chat_id)
    await message.answer("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π —É —Ü—å–æ–º—É —á–∞—Ç—ñ. –¢–µ–ø–µ—Ä —è –±—É–¥—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")


# /today
@dp.message(Command("today"))
async def today_schedule(message: types.Message):
    await message.answer(get_schedule_for_day(datetime.today().weekday()))


# /tomorrow
@dp.message(Command("tomorrow"))
async def tomorrow_schedule(message: types.Message):
    tomorrow_weekday = (datetime.today().weekday() + 1) % 7
    await message.answer(get_schedule_for_day(tomorrow_weekday))


# /week
@dp.message(Command("week"))
async def week_schedule(message: types.Message):
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±"]
    schedule = get_current_schedule()
    week_num = get_week_number()
    text = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ {week_num}-–π —Ç–∏–∂–¥–µ–Ω—å:\n\n"
    for day in weekdays:
        text += f"{day}:\n"
        if day in schedule and schedule[day]:
            for para, subj in sorted(schedule[day].items()):
                start_time = lesson_times[para].strftime('%H:%M')
                text += f"  {para} –ø–∞—Ä–∞ ({start_time}): {subj}\n"
        else:
            text += "  –ü–∞—Ä –Ω–µ–º–∞—î ‚úÖ\n"
        text += "\n"
    await message.answer(text)


# /whichweek
@dp.message(Command("whichweek"))
async def which_week(message: types.Message):
    week_num = get_week_number()
    await message.answer(f"‚ÑπÔ∏è –ó–∞—Ä–∞–∑ {week_num}-–π —Ç–∏–∂–¥–µ–Ω—å —Ä–æ–∑–∫–ª–∞–¥—É")


# /test_daily - –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
@dp.message(Command("test_daily"))
async def test_daily_schedule(message: types.Message):
    if message.chat.id in active_chats:
        await send_daily_schedule()
        await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–∞ —â–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞!")
    else:
        await message.answer("‚ö†Ô∏è –°–ø–µ—Ä—à—É –∞–∫—Ç–∏–≤—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")


@dp.message(Command("next"))
async def next_lesson(message: types.Message):
    now = datetime.now().time()
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
    today_index = datetime.today().weekday()
    today = weekdays[today_index]
    schedule = get_current_schedule()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–∞—Ä–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
    if today not in schedule or not schedule[today]:
        # –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–Ω—ñ
        for i in range(1, 7):  # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ 6 –¥–Ω—ñ–≤
            next_day_index = (today_index + i) % 7
            next_day = weekdays[next_day_index]
            if next_day in schedule and schedule[next_day]:
                next_para = min(schedule[next_day].keys())
                next_time = lesson_times[next_para]
                days_ahead = "–∑–∞–≤—Ç—Ä–∞" if i == 1 else f"—É {next_day}"
                await message.answer(
                    f"üìå –°—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –Ω–µ–º–∞—î. –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞ {days_ahead}: {next_para} –ø–∞—Ä–∞ –æ {next_time.strftime('%H:%M')} ‚Äî {schedule[next_day][next_para]}")
                return
        await message.answer("üìå –ü–∞—Ä –Ω–µ–º–∞—î –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ç–∏–∂–¥–µ–Ω—å ‚úÖ")
        return

    # –®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–∞—Ä—É —Å—å–æ–≥–æ–¥–Ω—ñ
    for para in sorted(schedule[today].keys()):
        start_time = lesson_times[para]
        if now < start_time:
            subj = schedule[today][para]
            await message.answer(f"üëâ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {para} –ø–∞—Ä–∞ –æ {start_time.strftime('%H:%M')} ‚Äî {subj}")
            return

    # –Ø–∫—â–æ –ø–∞—Ä–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è, —à—É–∫–∞—î–º–æ –∑–∞–≤—Ç—Ä–∞
    for i in range(1, 7):
        next_day_index = (today_index + i) % 7
        next_day = weekdays[next_day_index]
        if next_day in schedule and schedule[next_day]:
            next_para = min(schedule[next_day].keys())
            next_time = lesson_times[next_para]
            days_ahead = "–∑–∞–≤—Ç—Ä–∞" if i == 1 else f"—É {next_day}"
            await message.answer(
                f"üìå –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä–∏ –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è. –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—Ä–∞ {days_ahead}: {next_para} –ø–∞—Ä–∞ –æ {next_time.strftime('%H:%M')} ‚Äî {schedule[next_day][next_para]}")
            return

    await message.answer("üìå –ü–∞—Ä –Ω–µ–º–∞—î –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á–∏–π —Ç–∏–∂–¥–µ–Ω—å ‚úÖ")


# --- –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---

def get_schedule_for_day(day_index):
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
    day = weekdays[day_index]
    schedule = get_current_schedule()

    if day in schedule and schedule[day]:
        text = f"üìÖ –†–æ–∑–∫–ª–∞–¥ –Ω–∞ {day}:\n"
        for para in sorted(schedule[day].keys()):
            subj = schedule[day][para]
            start_time = lesson_times[para].strftime('%H:%M')
            text += f"{para} –ø–∞—Ä–∞ ({start_time}): {subj}\n"
    else:
        text = f"üìÖ {day}: –ø–∞—Ä –Ω–µ–º–∞—î ‚úÖ"
    return text


async def send_daily_schedule():
    """–ù–∞–¥—Å–∏–ª–∞—î —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –æ 7:00 —Ä–∞–Ω–∫—É"""
    text = get_schedule_for_day(datetime.today().weekday())
    for chat_id in list(active_chats):  # —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó
        try:
            await bot.send_message(chat_id, text)
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É {chat_id}: {e}")
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ñ —á–∞—Ç–∏
            active_chats.discard(chat_id)


async def check_lessons():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä—É –∑–∞ 15 —Ö–≤–∏–ª–∏–Ω"""
    now = datetime.now()
    current_time = now.time()
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"]
    today = weekdays[now.weekday()]
    schedule = get_current_schedule()

    if today in schedule and schedule[today]:
        for para, start_time in lesson_times.items():
            if para in schedule[today]:
                # –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–∑–∞ 15 —Ö–≤–∏–ª–∏–Ω –¥–æ –ø–∞—Ä–∏)
                reminder_datetime = datetime.combine(now.date(), start_time) - timedelta(minutes=15)
                reminder_time = reminder_datetime.time()

                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑ (–∑ —Ç–æ—á–Ω—ñ—Å—Ç—é –¥–æ —Ö–≤–∏–ª–∏–Ω–∏)
                if (current_time.hour == reminder_time.hour and
                        current_time.minute == reminder_time.minute):

                    subj = schedule[today][para]
                    message_text = f"‚è∞ –ß–µ—Ä–µ–∑ 15 —Ö–≤ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è {para} –ø–∞—Ä–∞: {subj}"

                    print(f"–ù–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {message_text}")

                    for chat_id in list(active_chats):
                        try:
                            await bot.send_message(chat_id, message_text)
                        except Exception as e:
                            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ —á–∞—Ç—É {chat_id}: {e}")
                            active_chats.discard(chat_id)


# --- –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ ---

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏
DAILY_SCHEDULE_TIME = time(8, 20)  # 8:20


async def scheduler():
    """–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–¥–∞—á"""
    last_daily_send = None  # –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –∫–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–ª–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥

    while True:
        now = datetime.now()
        current_time = now.time()
        current_date = now.date()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥
        if (current_time.hour == DAILY_SCHEDULE_TIME.hour and
                current_time.minute == DAILY_SCHEDULE_TIME.minute and
                last_daily_send != current_date):
            print(f"–ù–∞–¥—Å–∏–ª–∞—î–º–æ —â–æ–¥–µ–Ω–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –æ {current_time.strftime('%H:%M')}")
            await send_daily_schedule()
            last_daily_send = current_date

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–∞—Ä–∏
        await check_lessons()

        # –ß–µ–∫–∞—î–º–æ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        await asyncio.sleep(30)


# --- —Å—Ç–∞—Ä—Ç ---

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    print(f"–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞ {DAILY_SCHEDULE_TIME.strftime('%H:%M')}")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —è–∫ —Ñ–æ–Ω–æ–≤—É –∑–∞–¥–∞—á—É
    scheduler_task = asyncio.create_task(scheduler())

    try:
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    finally:
        # –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        scheduler_task.cancel()
        await bot.session.close()
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")


if __name__ == "__main__":
    asyncio.run(main())